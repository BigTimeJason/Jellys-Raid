{"version":3,"sources":["RaidCard.js","Header.js","Footer.js","TextContainer.js","VideoContainer.js","ImageContainer.js","GardenOfSalvation.js","RaidDetails.js","img/garden.png","img/lastwish.png","img/deepstonecrypt.png","Home.js","App.js","reportWebVitals.js","index.js"],"names":["RaidCard","Card","className","style","width","Img","variant","src","this","props","content","img","Body","Title","title","Text","description","Button","size","onClick","setRaid","id","Footer","encounters","time","React","Component","Header","Jumbotron","fluid","color","Navbar","bg","Brand","TextContainer","text","VideoContainer","class","videoId","opts","height","ImageContainer","imgsrc","GardenOfSalvation","encName","strategies","stratName","overviews","type","typeContent","individualStrat","RaidDetails","currentRaid","getEncounters","map","encounter","Tabs","defaultActiveKey","strategy","Tab","eventKey","overview","console","log","Accordion","person","index","Toggle","as","Collapse","Home","state","currentPage","raidArray","garden","lastwish","deepstonecrypt","setState","Row","CardGroup","raid","Container","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.db5c859a.chunk.js","sourcesContent":["import \"./css/Cards.css\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport React from \"react\";\r\n\r\nclass RaidCard extends React.Component {\r\n\r\n  /*\r\n  This class renders cards that allow the user to select a raid\r\n  */\r\n  render() {\r\n    return (\r\n      <Card className=\"text-left\" style={{ width: \"25rem\" }}>\r\n        <Card.Img variant=\"top\" src={this.props.content.img} />\r\n        <Card.Body>\r\n          <Card.Title>{this.props.content.title}</Card.Title>\r\n          <Card.Text>{this.props.content.description}</Card.Text>\r\n          <Button\r\n            size=\"sm\"\r\n            variant=\"outline-secondary\"\r\n            onClick={() => this.props.setRaid(this.props.content.id)}\r\n          >\r\n            View Tactics\r\n          </Button>\r\n        </Card.Body>\r\n        <Card.Footer className=\"text-right\">\r\n          <small className={\"text-muted\"}>\r\n            {this.props.content.encounters} encounters //{\" \"}\r\n            {this.props.content.time}\r\n          </small>\r\n        </Card.Footer>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RaidCard;\r\n","import \"./css/Header.css\";\r\nimport Jumbotron from \"react-bootstrap/Jumbotron\"\r\nimport React from \"react\";\r\n\r\nclass Header extends React.Component {\r\n  render() {\r\n    return (\r\n      <Jumbotron fluid>\r\n        <h1 style={{ color: \"white\" }}>\r\n          {this.props.content ? this.props.content.title : \"Choose Your Raid\"}\r\n        </h1>\r\n        <p className={\"lead text-muted\"}>\r\n          Select a card below to view it's encounters and corresponding\r\n          strategies\r\n        </p>\r\n      </Jumbotron>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import \"./css/Footer.css\";\r\n\r\nimport React from \"react\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\n\r\nclass Footer extends React.Component {\r\n  render() {\r\n    return (\r\n      <Navbar bg=\"dark\" variant=\"dark\">\r\n        <Navbar.Brand>Thanks for using this website!</Navbar.Brand>\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport ReactMarkdown from \"react-markdown\";\r\nclass TextContainer extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <ReactMarkdown>{this.props.text}</ReactMarkdown>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TextContainer;   ","import React from \"react\";\r\nimport YouTube from \"react-youtube\";\r\nimport TextContainer from \"./TextContainer\";\r\nclass VideoContainer extends React.Component {\r\n  render() {\r\n    return (\r\n      <div class=\"container\">\r\n        <div class=\"row\">\r\n          <div class=\"col-sm\"><TextContainer text={this.props.content.text}></TextContainer></div>\r\n          <div class=\"col-sm\">\r\n            <YouTube videoId={this.props.content.videoId} opts={{height: '350', width: '640'}} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default VideoContainer;\r\n","import React from \"react\";\r\nimport TextContainer from \"./TextContainer\";\r\nclass ImageContainer extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div class=\"container\">\r\n            <div class=\"row\">\r\n              <div class=\"col-sm\"><TextContainer text={this.props.content.text}></TextContainer></div>\r\n              <div class=\"col-sm\">\r\n                <img src={this.props.content.imgsrc}/>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ImageContainer;   ","import React from \"react\";\r\nimport YouTube from \"react-youtube\";\r\nimport TextContainer from \"./TextContainer.js\";\r\nimport VideoContainer from \"./VideoContainer.js\";\r\nimport ImageContainer from \"./ImageContainer.js\";\r\nclass GardenOfSalvation {\r\n  static getEncounters() {\r\n    /*\r\n    The raid consists of 4 parts (encounters)\r\n    Each encounter may be completed in a variety of ways (strategies)\r\n    Each strategy must describe what each player should do (up to 6 players in a fireteam) \r\n    */\r\n\r\n    return {\r\n      \r\n      encounters: [\r\n        {\r\n          encName: \"Chase the Consecrated Mind\",\r\n          strategies: [\r\n            {\r\n              id: 0,\r\n              stratName: \"Strategy 1\",\r\n              overviews: [{text: \"this is a video container\", type: 1, typeContent: \"3VTkBuxU4yk\"}],\r\n              individualStrat: [],\r\n            },\r\n            {\r\n              id: 1,\r\n              stratName: \"Challenge - Leftovers\",\r\n              overviews: [{text: \"this is a text container\", type: 0, typeContent: \"\"}],\r\n              individualStrat: [],\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          encName: \"Draw out the Consecrated Mind\",\r\n          strategies: [\r\n            {\r\n              id: 0,\r\n              stratName: \"Strategy 1\",\r\n              overviews: [{text: \"this is an img container\", type: 2, typeContent: \"H:/JellysRaid/src/img/gardenimg/Frog.png\"}],\r\n              individualStrat: [],\r\n            },\r\n            {\r\n              id: 1,\r\n              stratName: \"Strategy 2\",\r\n              overviews: [],\r\n              individualStrat: [],\r\n            },\r\n            {\r\n              id: 2,\r\n              stratName: \"Challenge - A Link to the Chain\",\r\n              overviews: [],\r\n              individualStrat: [],\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          encName: \"Defeat the Consecrated Mind\",\r\n          strategies: [\r\n            {\r\n              id: 0,\r\n              stratName: \"Strategy 1\",\r\n              overviews: [],\r\n              individualStrat: [],\r\n            },\r\n            {\r\n              id: 1,\r\n              stratName: \"Challenge - To The Top\",\r\n              overviews: [],\r\n              individualStrat: [],\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          encName: \"Defeat the Sanctified Mind\",\r\n          strategies: [],\r\n        },\r\n      ],\r\n    };\r\n  }\r\n}\r\n\r\nexport default GardenOfSalvation;\r\n","import \"./css/RaidDetails.css\";\r\nimport GardenOfSalvation from \"./GardenOfSalvation.js\";\r\n\r\nimport ImageContainer from \"./ImageContainer.js\";\r\nimport VideoContainer from \"./VideoContainer.js\";\r\nimport TextContainer from \"./TextContainer.js\";\r\n\r\nimport React from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Tabs from \"react-bootstrap/Tabs\";\r\nimport Tab from \"react-bootstrap/Tab\";\r\nimport Accordion from \"react-bootstrap/Accordion\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\n\r\nclass RaidDetails extends React.Component {\r\n  /*\r\n  This class renders details on a raid depending on what raid was selected\r\n\r\n  Notes:\r\n  \r\n  */\r\n  render() {\r\n    var currentRaid = null;\r\n    switch (this.props.content.id) {\r\n      case 0:\r\n        currentRaid = GardenOfSalvation.getEncounters();\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    return (\r\n      <>\r\n        {currentRaid.encounters.map((encounter) => (\r\n          <>\r\n            <Navbar bg=\"dark\" variant=\"dark\">\r\n              <Navbar.Brand>{encounter.encName}</Navbar.Brand>\r\n            </Navbar>\r\n            <Tabs defaultActiveKey=\"0\" id=\"uncontrolled-tab-example\">\r\n              {encounter.strategies.map((strategy) => (\r\n                <Tab\r\n                  eventKey={strategy.id}\r\n                  title={strategy.stratName}\r\n                  className=\"text-left\"\r\n                >\r\n                  {strategy.overviews.map((overview) => {\r\n                    console.log(overview.text);\r\n                    console.log(overview.type);\r\n                    console.log(overview.typeContent);\r\n                    switch (overview.type) {\r\n                      case 0:\r\n                      default:\r\n                        return (\r\n                          <div class=\"container\">\r\n                            <div class=\"row\">\r\n                              <div class=\"col-sm\">\r\n                                <TextContainer text={overview.text} />\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        );\r\n                      case 1:\r\n                        return (\r\n                          <VideoContainer\r\n                            content={{\r\n                              text: overview.text,\r\n                              videoId: overview.typeContent,\r\n                            }}\r\n                          />\r\n                        );\r\n                      case 2:\r\n                        return (\r\n                          <ImageContainer\r\n                            content={{\r\n                              text: overview.text,\r\n                              imgsrc: overview.typeContent,\r\n                            }}\r\n                          />\r\n                        );\r\n                    }\r\n                  })}\r\n\r\n                  <Accordion>\r\n                    {strategy.individualStrat.map((person, index) => (\r\n                      <Card>\r\n                        <Card.Header>\r\n                          <Accordion.Toggle\r\n                            as={Button}\r\n                            variant=\"link\"\r\n                            eventKey={index + 1}\r\n                          >\r\n                            {console.log(index)}\r\n                            {\"Fireteam Member \" + (index + 1)}\r\n                          </Accordion.Toggle>\r\n                        </Card.Header>\r\n\r\n                        <Accordion.Collapse eventKey={index + 1}>\r\n                          <Card.Body>{person}</Card.Body>\r\n                        </Accordion.Collapse>\r\n                      </Card>\r\n                    ))}\r\n                  </Accordion>\r\n                </Tab>\r\n              ))}\r\n            </Tabs>\r\n          </>\r\n        ))}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RaidDetails;\r\n","export default __webpack_public_path__ + \"static/media/garden.0af50a17.png\";","export default __webpack_public_path__ + \"static/media/lastwish.c9fb05dc.png\";","export default __webpack_public_path__ + \"static/media/deepstonecrypt.cff88acc.png\";","import RaidCard from \"./RaidCard.js\";\r\nimport Header from \"./Header.js\";\r\nimport Footer from \"./Footer.js\";\r\nimport RaidDetails from \"./RaidDetails.js\";\r\n\r\nimport './css/Home.css';\r\n\r\nimport garden from \"./img/garden.png\";\r\nimport lastwish from \"./img/lastwish.png\";\r\nimport deepstonecrypt from \"./img/deepstonecrypt.png\";\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport CardGroup from \"react-bootstrap/CardGroup\";\r\nimport Container from \"react-bootstrap/Container\";\r\n\r\nimport React from \"react\";\r\n\r\nclass Home extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentPage: null,\r\n      raidArray: [\r\n        {\r\n          id: 0,\r\n          title: \"Garden of Salvation\",\r\n          description: \"The Garden calls out to you.\",\r\n          encounters: 4,\r\n          time: \"45-90 mins\",\r\n          img: garden,\r\n        },\r\n        {\r\n          id: 1,\r\n          title: \"Last Wish\",\r\n          description: \"The opportunity of a lifetime.\",\r\n          encounters: 6,\r\n          time: \"60-120 mins\",\r\n          img: lastwish,\r\n        },\r\n        {\r\n          id: 2,\r\n          title: \"Deep Stone Crypt\",\r\n          description: \"Fear what waits below.\",\r\n          encounters: 5,\r\n          time: \"45-90 mins\",\r\n          img: deepstonecrypt,\r\n        },\r\n      ],\r\n    };\r\n  }\r\n  render() {\r\n    return (\r\n      <>\r\n        <Header></Header>\r\n        {this.state.currentPage != null ? (\r\n          <Button\r\n            className=\"backbutton\"\r\n            variant=\"outline-secondary\"\r\n            size=\"lg\"\r\n            onClick={() => this.setState({ currentPage: null })}\r\n          >\r\n            Home\r\n          </Button>\r\n        ) : (\r\n          <></>\r\n        )}\r\n        {this.state.currentPage == null ? (\r\n          <Row className=\"row justify-content-md-center\">\r\n            <CardGroup>\r\n              {this.state.raidArray.map((raid) => (\r\n                <RaidCard\r\n                  content={raid}\r\n                  setRaid={(index) => this.setState({ currentPage: index })}\r\n                ></RaidCard>\r\n              ))}\r\n            </CardGroup>\r\n          </Row>\r\n        ) : (\r\n          <></>\r\n        )}\r\n        <Container>\r\n          {this.state.currentPage != null ? (\r\n            <RaidDetails\r\n              content={this.state.raidArray[this.state.currentPage]}\r\n            ></RaidDetails>\r\n          ) : (\r\n            <></>\r\n          )}\r\n        </Container>\r\n        <Footer></Footer>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import './css/App.css';\nimport Home from './Home.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Home/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/Index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}